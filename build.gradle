plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.owasp.dependencycheck' version '8.4.0'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.app'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'com.mysql:mysql-connector-j:9.2.0'

    runtimeOnly 'com.h2database:h2'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
        xml.outputLocation.set(file("${layout.buildDirectory.get()}/test/jacocoTestReport.xml"))
    }
}

checkstyle {
    toolVersion = '10.12.1'
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

pmd {
    toolVersion = '6.55.0'
    ruleSetFiles = files('config/pmd/ruleset.xml')
    ruleSets = []
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

def sonarHostReachable = false
if (sonarHostReachable) {
    apply plugin: "org.sonarqube"
    sonarqube {
        properties {
            property "sonar.projectKey", "nombre-proyecto"
            property "sonar.host.url", "http://localhost:9000"
            property "sonar.login", "TOKEN_O_CLAVE"
        }
    }
}
