plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'war'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.app'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        // ExclusiÃ³n agresiva de mÃ³dulos conflictivos con JBoss + Java 8
        exclude group: 'jakarta.xml.bind', module: 'jakarta.xml.bind-api'
        exclude group: 'jakarta.activation', module: 'jakarta.activation-api'
        exclude group: 'org.glassfish.jaxb', module: 'jaxb-runtime'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-core'
        exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'
        exclude group: 'org.jvnet.staxex', module: 'stax-ex'
        exclude group: 'com.sun.xml.fastinfoset', module: 'FastInfoset'
        exclude group: 'com.sun.istack', module: 'txw2'
        exclude group: 'org.ow2.asm', module: 'asm' // usado por ByteBuddy internamente
        exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'

        resolutionStrategy.eachDependency { details ->
            // Evitar versiones modernas con module-info.class
            if (details.requested.name == 'log4j-api') {
                details.useVersion '2.13.3'
            }
            if (details.requested.name == 'byte-buddy') {
                details.useVersion '1.10.20' // estable y sin module-info
            }
            if (details.requested.name.startsWith("jackson-")) {
                details.useVersion '2.11.4' // compatible con Java 8 sin META-INF/versions
            }
        }
    }
}

dependencies {
    // Spring Boot starters (excluyendo Tomcat embebido)
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'

    // Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

    // Base de datos
    implementation 'com.mysql:mysql-connector-j:8.0.33'
    runtimeOnly 'com.h2database:h2' // solo local/dev

    // JWT Java 8
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // JAXB Java 8
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

bootJar {
    enabled = false
}

bootWar {
    enabled = true
    archiveFileName = 'ms-challenge-app.war'
}

// ðŸ”¥ Filtra clases conflictivas para JBoss
tasks.withType(War).configureEach {
    doFirst {
        println "ðŸ§¹ Limpiando WAR de module-info y versiones META-INF..."
    }

    // Evita errores por Java 9+ (multi-release jars)
    exclude('**/module-info.class')
    exclude('META-INF/versions/**')
    exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

checkstyle {
    toolVersion = '10.12.1'
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

pmd {
    toolVersion = '6.55.0'
    ruleSetFiles = files('config/pmd/ruleset.xml')
    ruleSets = []
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}
